// function getDigit(num, digit, str = num.toString()) {
//   return +str[str.length - 1 - digit];
// }

// const getDigit = (num, i) => +`${num}`[`${num}`.length - 1 - i] || 0;

// const digitCount = (num) => `${num}`.length;

function getDigit(num, i) {
  return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;
}

function digitCount(num) {
  if (num === 0) return 1;
  return Math.floor(Math.log10(Math.abs(num))) + 1;
}

function mostDigits(nums) {
  let maxDigits = 0;
  for (let i = 0; i < nums.length; i++) {
    maxDigits = Math.max(maxDigits, digitCount(nums[i]));
  }
  return maxDigits;
}

function radixSort(nums) {
  const maxDigitCount = mostDigits(nums);
  for (let k = 0; k < maxDigitCount; k++) {
    let digitBuckets = Array.from({ length: 10 }, () => []);

    for (let i = 0; i < nums.length; i++) {
      const digit = getDigit(nums[i], k);

      digitBuckets[digit].push(nums[i]);
    }

    nums = [].concat(...digitBuckets);
  }

  return nums;
}

console.log(radixSort([1, 2199, 329, 32, 66, 11, 2, 91921]));
// maxDigitCount = mostDigits(nums)
//                 return 5

// [[], [], [], [], [], [], [], [], [], []] k = 0
// [[], [1], [], [], [], [], [], [], [], []] i = 0
// [[], [1], [], [], [], [], [], [], [], [2199]] i = 1
// [[], [1], [], [], [], [], [], [], [], [2199, 329]] i = 2
// [[], [1], [32], [], [], [], [], [], [], [2199, 329]] i = 3
// [[], [1], [32], [], [], [], [66], [], [], [2199, 329]] i = 4
// [[], [1, 11], [32], [], [], [], [66], [], [], [2199, 329]] i = 5
// [[], [1, 11, 2], [32], [], [], [], [66], [], [], [2199, 329]] i = 6
// [[], [1, 11, 91921], [32, 2], [], [], [], [66], [], [], [2199, 329]] i = 7
// nums = [1, 11, 91921, 32, 2, 66, 2199, 329]

// [[], [], [], [], [], [], [], [], [], []] k = 1
// [[1], [], [], [], [], [], [], [], [], []] i = 0
// [[1], [11], [91921], [], [], [], [], [], [], []] i = 1
// [[1], [11], [91921], [], [], [], [], [], [], []] i = 2
// [[1], [11], [91921], [32], [], [], [], [], [], []] i = 3
// [[1, 2], [11], [91921], [32], [], [], [], [], [], []] i = 4
// [[1, 2], [11], [91921], [32], [], [], [66], [], [], []] i = 5
// [[1, 2], [11], [91921], [32], [], [], [66], [], [], [2199]] i = 6
// [[1, 2], [11], [91921, 329], [32], [], [], [66], [], [], [2199]] i = 7
// nums = [1, 2, 11, 91921, 329, 32, 66, 2199]

// [[], [], [], [], [], [], [], [], [], []] k = 2
// [[1], [], [], [], [], [], [], [], [], []] i = 0
// [[1, 2], [], [], [], [], [], [], [], [], []] i = 1
// [[1, 2, 11], [], [], [], [], [], [], [], [], []] i = 2
// [[1, 2, 11], [], [], [], [], [], [], [], [], [91921]] i = 3
// [[1, 2, 11], [], [], [329], [], [], [], [], [], [91921]] i = 4
// [[1, 2, 11, 32], [], [], [329], [], [], [], [], [], [91921]] i = 5
// [[1, 2, 11, 32, 66], [], [], [329], [], [], [], [], [], [91921]] i = 6
// [[1, 2, 11, 32, 66], [2199], [], [329], [], [], [], [], [], [91921]] i = 7
// nums = [1, 2, 11, 32, 66, 2199, 329, 91921]

// [[], [], [], [], [], [], [], [], [], []] k = 3
// [[1], [], [], [], [], [], [], [], [], []] i = 0
// [[1, 2], [], [], [], [], [], [], [], [], []] i = 1
// [[1, 2, 11], [], [], [], [], [], [], [], [], []] i = 2
// [[1, 2, 11, 32], [], [], [], [], [], [], [], [], []] i = 3
// [[1, 2, 11, 32, 66], [], [], [], [], [], [], [], [], []] i = 4
// [[1, 2, 11, 32, 66], [], [2199], [], [], [], [], [], [], []] i = 5
// [[1, 2, 11, 32, 66, 329], [], [2199], [], [], [], [], [], [], []] i = 6
// [[1, 2, 11, 32, 66, 329], [91921], [2199], [], [], [], [], [], [], []] i = 7
// nums = [1, 2, 11, 32, 66, 329, 91921, 2199]

// [[], [], [], [], [], [], [], [], [], []] k = 4
// [[1], [], [], [], [], [], [], [], [], []] i = 0
// [[1, 2], [], [], [], [], [], [], [], [], []] i = 1
// [[1, 2, 11], [], [], [], [], [], [], [], [], []] i = 2
// [[1, 2, 11, 32], [], [], [], [], [], [], [], [], []] i = 3
// [[1, 2, 11, 32, 66], [], [], [], [], [], [], [], [], []] i = 4
// [[1, 2, 11, 32, 66, 329], [], [], [], [], [], [], [], [], []] i = 5
// [[1, 2, 11, 32, 66, 329], [], [], [], [], [], [], [], [], [91921]] i = 6
// [[1, 2, 11, 32, 66, 329, 2199], [], [], [], [], [], [], [], [], [91921]] i = 7
// nums = [1, 2, 11, 32, 66, 329, 2199, 91921]

// return [1, 2, 11, 32, 66, 329, 2199, 91921]

console.log(radixSort([1, 2199, 329, 32, 66, 11, 2, 91921, 283, 32, 4, 3, 91]));

// console.log(getDigit(13728, 12));
// console.log(digitCount(13728));
// console.log(mostDigits([2878, 1, 232, 1839, 8483333, 192]));
